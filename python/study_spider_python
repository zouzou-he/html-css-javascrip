#基于python的爬虫学习

#慕课

     scrapy框架
     数据流向（三个）： 


#B站：
     
    
     Xpath是和re正则表达式功能相识的解析方法

     数据库:
          mongodb是介于关系型数据库（mysql）和非关系型数据库（mongodb很像关系型）
          行、列、键值对、文档（MongoDB）
          MongoDB的安装查看，进入cmd,输入natstat -an 看是否有127.0.0.1:27017的地址
          在bin文件夹下找到mongod.cfg配置文件文件 bn 

               # network interfaces ，吗
               net:
               port: 27017  #可以修改这个改端口号
               bindIp: 127.0.0.1 #改成0·0·0·0回到电脑的服务中重新启动，然后其他的计算机在同一局域网的人可以通过这个 地址链接到我得 数据库
          ipconfig查看当前ip地址
          navicat链接数据库的软件

     http和https

     GET请求 从服务器上获取数据
          GET是把参数数据队列加到提交的表单里面
          action属性所指的url中
          值和表单内的各字段一一对应
          在url中可以看的见
          服务器端用request.QueryString获取变量的值
          get方法传递的数据量较小，不超过2k，而且安次全性很低

     POST请求 向服务器传送数据（json）
          post是通过http post机制将表单中的字段和内容放置在html header中一起传送到
           action属性所指的url中
           用户看不到这个过程
          服务器端用request.Form获取提交的数据
          post传送的数据比较大，一般没有限制,安全性较高，可以加密

     md5：不可逆加密算法 （用于验证和校验,每个文件可以进行加密）
          用到hashlib库
          import hashlib
          str='zouyongke'
          #创建md5对象
          md5 = hashlib.md5()
          #放入的数据要改为二进制 encode
          md5.update(str.encode())
          #取出数据
          result=md5.hexdigest()
          print(result)

      提取数据：
          一般的两种数据：结构化的json和html字符串
          re正则表达式解析以上两种都可以，还有xpath也可以解析，后面去b站学习
     
     (re)正则表达式：
          str是需要匹配的东西
          str2是在里面匹配str
          res=re.match(str，str2)
          res是前面这的创建的对象
          res.group()是匹配的的东西

          单字符匹配：（大写的和小写的功能相反） 
               " . "     匹配任意一个字符（除了\n） （注意匹配邮箱是后也有这个东东，可以用\将这个）
               "[]"      匹配[]中列举的字符 括号中写上范围就可以匹配这个范围内的所有东西1-9 A-Z a-z
               "\d"      匹配数值1-9
               "\D"      匹配非数字
               "\s"      匹配空白，就是空格或者tab键
               "\S"      匹配非空白
               "\w"      匹配单词字符，即1-9 A-Z a-z
               "\W"      匹配非单词字符
          多字符匹配：(这个都是匹配前一个字符的次数，一般和单字符匹配一起用)
               " * "     匹配前一个字符出现0次或者无限次，即有和无的匹配
               " + "     匹配前一个字符出现1次或者无限次，即最少一次
               " ? "     匹配前一个字符出现1次或者0次，即有没有出现 
               "{m}"     匹配前一个字符出现m次
               "{m,n}"   匹配前一个字符出现从m到n次
          匹配开头和结尾 分组： ^ 和 $  |（跟或的逻辑很相似）
          （）括号可以规划处一个区域进行匹配,还可以在group中
          \的匹配注意，其中作用是转换，要用\\\\才可以匹配。可以在''前直接加r 就可以了

     异常处理：
          try:
          （可能有错的代码）
          except io error：
               （出错的情况）

          try和finally,finally是一定进行的